#making the docker runner to run by default
default:
  tags:
    - docker

#run everything on the test branch
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "ci/refactor"'
      when: always
    - when: never

stages:
  - lint #code quality check
  - build #produce artifacts
  - test # testing
  - analyze # static analyze with SonarQube
  - report # Summary and Deployment

#frontend linting ( runs code checks that ensure style, syntax and structure consistency )
# if this stage fails, the whole pipeline stops, so saves resources
frontend-lint:
  stage: lint
  image: node:20 #tells the container which image to use for this job
  variables:
    NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/frontend/.npm"
  cache: #stores all the downloaded dependencies, so in future build it can be reused
    key: ${CI_COMMIT_REF_SLUG} #we keep different caches for each branch. The cache is stored on the runners host, which is outside the job's docker container
    paths:
      - frontend/.npm/
      - frontend/node_modules/
  before_script:
    - echo "=== Starting frontend lint stage ==="
    - cd frontend
    - echo "=== Current working directory ==="
    - pwd
    - echo "=== Listing frontend cache directories ==="
    - ls -R .npm || echo "No npm cache yet"
    - ls -R node_modules | head -20 || echo "node_modules empty or missing"
    - echo "=== Checking for /cache mount (host cache volume) ==="
    - ls -la /cache || echo "No /cache volume detected"
    - npm ci --prefer-offline --cache .npm --no-audit #installs all the dependencies from package.json ( wipes all the existing node modules and starts fresh)
  script:
    - echo "=== Running ESLint ==="
    - npx eslint . --format json --output-file eslint-report.json #runs the linting
  artifacts:
    paths:
      - frontend/eslint-report.json
    when: always
    expire_in: 1 week
#  rules:
#    - changes:
#        - frontend/**/*
#    - when: never
  allow_failure: false

backend-lint:
  stage: lint
  image: gradle:8.4.0-jdk17
  variables:
    GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle" #where we download the dependencies
  cache:
    key: ${CI_COMMIT_REF_SLUG} #branch name, converted into string. That way, each branch has its own isolated cache
    paths:
      - backend/.gradle/
  before_script:
    - cd backend
  script:
    - echo "=== Current working directory ==="
    - pwd
    - echo "=== Listing backend/.gradle directory ==="
    - ls -R .gradle || echo "No gradle cache yet"
    - echo "=== Checking for /cache mount (host cache volume) ==="
    - ls -la /cache || echo "No /cache volume detected"
    - echo "=== Running Gradle checks ==="
    - ./gradlew clean check --no-daemon --console=plain
  artifacts:
    when: always
    reports:
      junit: backend/build/test-results/test/*.xml
    paths:
      - backend/build/reports/
    expire_in: 1 week
#  rules:
#    - changes:
#        - backend/**/*
#    - when: never
  allow_failure: false

frontend-build:
  stage: build
  image: node:20
  variables:
    NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/frontend/.npm"
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/.npm/
      - frontend/node_modules/
  before_script:
    - cd frontend
    - npm ci --prefer-offline --cache .npm --no-audit
  script:
    - npm run build -- --configuration=production
  artifacts:
    name: "frontend-dist-$CI_COMMIT_SHORT_SHA"
    paths:
      - frontend/dist/
    expire_in: 1 week
#  rules:
#    - changes:
#        - frontend/**/*
#    - when: never
  allow_failure: false

backend-build:
  stage: build
  image: gradle:8.4.0-jdk17
  variables:
    GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - backend/.gradle/
  before_script:
    - cd backend
  script:
    - ./gradlew clean assemble --no-daemon
  artifacts:
    name: "backend-jar-$CI_COMMIT_SHORT_SHA"
    paths:
      - backend/build/libs/
    expire_in: 1 week
#  rules:
#    - changes:
#        - backend/**/*
#    - when: never
  allow_failure: false

frontend-test:
  stage: test
  image: node:20
  variables:
    NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/frontend/.npm"
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/.npm/
      - frontend/node_modules/
  before_script:
    - cd frontend
    - npm ci --prefer-offline --cache .npm --no-audit
  script:
    - npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
  artifacts:
    when: always
    paths:
      - frontend/coverage/
    reports:
      junit: frontend/test-results.xml
    expire_in: 1 week
#  rules:
#    - changes:
#        - frontend/**/*
#    - when: never
  allow_failure: false

backend-test:
  stage: test
  image: gradle:8.4.0-jdk17
  variables:
    GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - backend/.gradle/
  before_script:
    - cd backend
  script:
    - ./gradlew test --no-daemon
  artifacts:
    when: always
    paths:
      - backend/build/reports/tests/
    reports:
      junit: backend/build/test-results/test/*.xml
    expire_in: 1 week
#  rules:
#    - changes:
#        - backend/**/*
#    - when: never
  allow_failure: false
