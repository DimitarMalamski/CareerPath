variables:
  WORK_DIR: "backend"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.caching=true"
  GIT_DEPTH: "20"
  GIT_LFS_SKIP_SMUDGE: "1"

stages:
  - build
  - test

.default_job:
  before_script:
    - cd $WORK_DIR
  variables:
    GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"

frontend-build:
  stage: build
  rules:
    - changes: [ "frontend/**/*", ".gitlab-ci.yml" ]
    - when: never
  before_script:
    - cd frontend
  variables:
    NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/frontend/.npm"
    NODE_OPTIONS: "--max-old-space-size=4096"
  cache:
    key:
      files:
        - frontend/package-lock.json
    paths:
      - frontend/.npm/
      - frontend/.angular/cache/
      - frontend/node_modules/.cache/
    policy: pull-push
  script:
    - npm ci --prefer-offline --cache .npm
    - npx ng build careerpath-frontend --configuration=production --no-prerender --source-map=false
  artifacts:
    name: "frontend-build"
    paths:
      - frontend/dist/
    expire_in: 1 week

build:
  stage: build
  extends: .default_job
  rules:
    - changes: [ "backend/**/*", ".gitlab-ci.yml" ]
    - when: never
  script:
    - .\gradlew.bat "-Dorg.gradle.caching=true" --configuration-cache assemble
  artifacts:
    paths:
      - backend/build/libs/
    expire_in: 1 week

test:
  stage: test
  extends: .default_job
  rules:
    - changes: [ "backend/**/*", ".gitlab-ci.yml" ]
    - when: never
  script:
    - .\gradlew.bat test --no-configuration-cache
  artifacts:
    when: always
    reports:
      junit: backend/build/test-results/test/*.xml
    paths:
      - backend/build/test-results/test/
      - backend/build/reports/tests/test/
    expire_in: 1 week

compose-build:
  needs:
    - job: frontend-build
    - job: build
  image: docker:latest

  stage: test
  services:
    - docker:dind

  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

  before_script:
    - echo "CI_PROJECT_DIR is: $CI_PROJECT_DIR"
    - ls ".\docker"
    - powershell -Command "try { docker compose version } catch { docker-compose version }"

  script:
    - docker compose -f ".\docker\docker-compose.yml" up --build -d
    - echo "‚è≥ Waiting for backend to start..."
    - |
      for ($i = 1; $i -le 10; $i++) {
        try {
          Invoke-WebRequest -Uri "http://localhost:8080/api/jobs" -UseBasicParsing -ErrorAction Stop
          Write-Host "‚úÖ Backend is ready"
          break
        } catch {
          Write-Host "Retrying in 5s..."
          Start-Sleep -Seconds 5
        }
      }
    - Write-Host "üîé Testing backend endpoint"
    - |
      try {
      Invoke-WebRequest -Uri "http://localhost:8080/api/jobs" -UseBasicParsing -ErrorAction Stop
      Write-Host "‚úÖ Backend reachable. SSR should work in production builds."
      } catch {
      Write-Host "‚ùå Backend not reachable!"
      exit 1
      }
    - docker compose logs

  rules:
    - changes:
        - docker/**
        - backend/**
        - frontend/**
        - .gitlab-ci.yml
    - when: always

  allow_failure: false
  after_script:
    - docker compose -f ".\docker\docker-compose.yml" down